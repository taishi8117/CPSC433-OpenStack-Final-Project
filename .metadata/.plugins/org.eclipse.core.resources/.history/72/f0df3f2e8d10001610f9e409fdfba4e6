package lib;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Reads server configuration file for the Web servers
 * @author TAISHI
 *
 */
public class ReadConfig {
	File config_file;
	HashMap<String, String> config_map;

	// boolean to check if LocScript was there
	private boolean script_set = false;

	
	
	//regex
	private static final Matcher locScriptRegex = Pattern.compile("LocScript\\:\\s*([^\\s]+)").matcher("");
	private static final Matcher commentRegex = Pattern.compile("#.*").matcher("");
	
	public ReadConfig(String config_file) throws Exception {
		this.config_file = new File(config_file);
		if (!this.config_file.isFile()) {
			throw new Exception("Configuration not found");
		}
		this.config_map = new HashMap<String, String>();
	}
	
	private void parse() throws Exception {
		InputStream inputStream = new FileInputStream(config_file);
		BufferedReader buffer = new BufferedReader(new InputStreamReader(inputStream));
		String line;
		

		while ((line = buffer.readLine()) != null) {
			if (commentRegex.reset(line).find()) {
				// found comment
				continue;
			} else if (locScriptRegex.reset(line).find()) {
				// found "LocScript: <location to script directory>"
				script_set = true;
				config_map.put("LocScript", locScriptRegex.group(1).trim());
			}
			
			
			else if (!virtual_flag && portRegex.reset(line).find()) {
			 	// found "Listen <port>"
			 	port_set = true;
			 	config_map.put("port", portRegex.group(1).trim());
			} else if (!virtual_flag && poolSizeRegex.reset(line).find()) {
			 	// found "ThreadPoolSize <size>"
			 	config_map.put("ThreadPoolSize", poolSizeRegex.group(1).trim());
			} else if (!virtual_flag && cacheSizeRegex.reset(line).find()) {
			 	// found "CacheSize <size>"
			 	cache_set = true;
			 	config_map.put("CacheSize", cacheSizeRegex.group(1).trim());
			} else if (!virtual_flag && incompTimeoutRegex.reset(line).find()) {
				// found "IncompleteTimeout <timeout in seconds>
				config_map.put("IncompleteTimeout", incompTimeoutRegex.group(1).trim());
			} else if (!virtual_flag && virtualStartRegex.reset(line).find()) {
				// starting virtual host parsing
				virtual_flag = true;
			} else if (virtual_flag && virtualEndRegex.reset(line).find()) {
				// ending virtual host parsing
				virtual_flag = false;
				if (server_name == "" || document_root == "") {	//one of them is not set
					buffer.close();
					throw new Exception("Error in parsing configuration: Either server name or document root is not set");
				}
				// putting the parsed data into the HashMap
				config_map.put(server_name, document_root);
				num_virtual++;
				
				// put <server_name:port> as a legit servername (only if port is already set)
				//
				//if (port_set && Debug.IS_DEBUG) {
				//	config_map.put(server_name + ":" + config_map.get("port"), document_root);
				//	num_virtual++;
				//}

				// reinitialize
				server_name = "";
				document_root = "";
			} else if (virtual_flag && virtualContentRegex.reset(line).find()) {
				if (virtualContentRegex.group(1).equals("DocumentRoot")) {
					// found "DocumentRoot <root dir>
					document_root = virtualContentRegex.group(2).trim();
				} else if (virtualContentRegex.group(1).equals("ServerName")) {
					// found "ServerName <server name>
					server_name = virtualContentRegex.group(2).trim();
				} 
			} 
		}
		buffer.close();

	}
	
	
	/**
	 * Returns mapped configuration
	 */
	public HashMap<String, String> getConfig() throws Exception {
		parse();
		Debug.debug("Number of virtual host configurations: " + num_virtual);
		if (cache_set && port_set && num_virtual > 0) {
			return config_map;
		}else {
			throw new Exception ("Error parsing configuration: either Listen, CacheSize, or at least one of Virtual Host configurations are missing");
		}
	}

}
