package lib;

import java.util.Arrays;

/**
 * MAC Address object
 * 
 * Referenced from: https://github.com/wallnerryan/floodlight/blob/master/src/main/java/net/floodlightcontroller/util/MACAddress.java
 * @author TAISHI
 *
 */
public class MACAddress {
	public static final int MAC_ADDRESS_LENGTH = 6;
	private byte[] address = new byte[MAC_ADDRESS_LENGTH];
	
	public MACAddress(byte[] address) {
		this.address = Arrays.copyOf(address, MAC_ADDRESS_LENGTH);
	}
	
	
	/**
	 * Convert long to MACAddress instance; the lower 48 bits of the long value
	 * are used to parse as a MAC address
	 */
	public static MACAddress convertFromLong(long address) {
		byte[] addressInBytes = new byte[] {
                (byte)((address >> 40) & 0xff),
                (byte)((address >> 32) & 0xff),
                (byte)((address >> 24) & 0xff),
                (byte)((address >> 16) & 0xff),
                (byte)((address >> 8 ) & 0xff),
                (byte)((address >> 0) & 0xff)
        };

        return new MACAddress(addressInBytes);
	}
	
	/**
	 * Convert String to MACAddress instance
	 * @param address
	 * @return
	 * @throws Exception  parsing error
	 */
	public static MACAddress convertFromString(String address) throws Exception {
        String[] elements = address.split(":");
        if (elements.length != MAC_ADDRESS_LENGTH) {
            throw new Exception(
                    "Specified MAC Address must contain 12 hex digits" +
                    " separated pairwise by :'s.");
        }

        byte[] addressInBytes = new byte[MAC_ADDRESS_LENGTH];
        for (int i = 0; i < MAC_ADDRESS_LENGTH; i++) {
            String element = elements[i];
            addressInBytes[i] = (byte)Integer.parseInt(element, 16);
        }

        return new MACAddress(addressInBytes);
    }

	public static MACAddress getRandomMACAddr() {
		return null;
	}
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
        for (byte b: address) {
            if (builder.length() > 0) {
                builder.append(":");
            }
            builder.append(String.format("%02X", b & 0xFF));
        }
        return builder.toString();
	}
}
