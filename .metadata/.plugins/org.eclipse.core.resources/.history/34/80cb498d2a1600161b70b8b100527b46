package project;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.HashMap;
import java.util.Scanner;

import org.apache.commons.io.IOUtils;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.json.simple.parser.JSONParser;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

/**
 * A simple HTTP server for supporting external API access.
 * Currently supporting API contexts are following:
 * Note that all message body needs to be JSON form
 * 
 * + (POST) /createTenant
 * 		- POST body: {"network" : <network name>}
 * 		- response body : {"method" : "createTenant", "network" : <network name> , "networkId" : <network id created> , "tenantID" : <tenant id created> } on success
 * 						  {"method" : "createTenant", "network" : <network name> , "error" : "true" } on error
 * 
 * + (POST) /deleteTenant
 * 		- POST body: {"tenantId" : <tenant id to delete>}
 * 		- response body : {"method" : "deleteTenant", "tenantId" : <tenant id to delete> , "success" : ("true"|"false") }
 * 
 * + (POST) /getTenantDetail
 * 		- POST body: {"tenantId" : <tenant id for which to retrieve the detail> }
 * 		- response body : {"method" : "getTenantDetail" , "tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : (null|<subnet id>) }
 * 
 * + (POST) /createSubnet
 * 		- POST body: {"tenantId" : <tenant id> , "networkId" : <network id> , "domain" : <domain name to create for the subnet> }
 * 		- response body : {"method" : "createSubnet" , "tenantId" : <tenant id> , "networkId" : <network id>, "subnetId" : <subnet id> , "domain" : <domain name> } on success
 * 						  {"method" : "createSubnet" , "tenantId" : <tenant id> , "networkId" : <network id>, "error" : "true" } on error
 * 
 * + (POST) /destroySubnet
 * 		- POST body : {"tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : <subnet id> }
 * 		- response body : {"method" : "destroySubnet" , "tenantId" : <tenant id> , "networkId" : <network id>" , "subnetId" : <subnet id> , "success" : ("true"|"false") }
 * 
 * + (POST) /getSubnetDetail
 * 		- POST body: {"tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : <subnet id> }
 * 		- response body : {"method" : "getSubnetDetail" , "tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : <subnet id> , {stuff from Subnet.getDetail()} ..... } on success
 *						  {"method" : "getSubnetDetail" , "tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : <subnet id> , "error" : "true" } on error
 *
 * + (POST) /createServer
 * 		- POST body: {"tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : <subnet id> , "servername" : <server name> , "password" : <password for default user> }
 * 		- response body : {"method" : "createServer" , "tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : <subnet id> , "serverId" : <server id created> , "servername" : <server name> , "password" : <password> } on success
 *						  {"method" : "createServer" , "tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : <subnet id> , "error" : "true" } on error
 * 
 * + (POST) /destroyServer
 * 		- POST body : {"tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : <subnet id> , "serverId" : <server id>}
 * 		- response body : {"method" : "destroyServer" , "tenantId" : <tenant id> , "networkId" : <network id>" , "subnetId" : <subnet id> , "serverId" : <server id> , "success" : ("true"|"false") }
 * 
 * + (POST) /listServer
 * 		- POST body : {"tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : <subnet id> }
 * 		- response body : {"method" : "listServer" , "tenantId" : <tenant id> , "networkId" : <network id>" , "subnetId" : <subnet id> , {stuff from APIHandler.listServers()} .... } on success
 * 		                  {"method" : "listServer" , "tenantId" : <tenant id> , "networkId" : <network id>" , "subnetId" : <subnet id> , "error" : "true" } on error
 * 
 * + (POST) /getServerDetail
 * 		- POST body: {"tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : <subnet id> , "serverId" : <server id> }
 * 		- response body : {"method" : "getServerDetail" , "tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : <subnet id> , "serverId" : <server id> ,{stuff from VirtualServer.getServerDetail()} ..... } on success
 *						  {"method" : "getServerDetail" , "tenantId" : <tenant id> , "networkId" : <network id> , "subnetId" : <subnet id> , "serverId" : <server id> ,"error" : "true" } on error
 * 
 * 
 * @author TAISHI
 */
public class SimpleHTTPServer {
	private Controller controller;
	private APIHandler apiHandler;
	private HttpServer server;
	
	private static final int DEFAULT_BACKLOG = 10;
	
	/**
	 * Binds to the port specified in {@code controller.configMap}
	 * @throws IOException - when failed to start the server
	 */
	public SimpleHTTPServer(Controller controller, APIHandler apiHandler) throws IOException {
		this.controller = controller;
		this.apiHandler = apiHandler;
		
		int ctrlPort = Integer.parseInt(controller.configMap.get("CtrlPort"));
		
		server = HttpServer.create(new InetSocketAddress(ctrlPort), DEFAULT_BACKLOG );
		server.createContext("/createTenant", new APICallHandler());
		server.createContext("/deleteTenant", new deleteTenantHandler());
		server.createContext("/getTenantDetail", new getTenantDetailHandler());
		
		server.createContext("/createSubnet", new createSubnetHandler());
		server.createContext("/destroySubnet", new destroySubnetHandler());
		server.createContext("/getSubnetDetail", new getSubnetDetailHandler());

		server.createContext("/createServer", new createServerHandler());
		server.createContext("/destroyServer", new destroyServerHandler());
		server.createContext("/listServer", new listServerHandler());
		server.createContext("/getServerDetail", new getServerDetailHandler());
		
		server.setExecutor(null);
	}

	/**
	 * Starts the HTTP server
	 */
	public void start() {
		server.start();
	}
	
	private class APICallHandler implements HttpHandler {

		@Override
		public void handle(HttpExchange t) throws IOException {
			String method = t.getRequestMethod();

			try {
				if (!method.equals("POST")) {
					//not supporting
					throw new Exception("Non POST request");
				}
				
				
				String postStr = IOUtils.toString(t.getRequestBody(), "UTF-8");
				JSONObject obj = (JSONObject) JSONValue.parseWithException(postStr);
				
				String api = t.getHttpContext().getPath();
				String response;
				
				if (api.equals("/createTenant")) {
					response = createTenantHandler(t);
				}else if (api.equals("/deleteTenant")) {
					response = deleteTenantHandler(t);
				}else if (api.equals("/getTenantDetail")) {
					response = getTenantDetailHandler(t);
				}else if (api.equals("/createSubnet")) {
					response = createSubnetHandler(t);
				}else if (api.equals("/destroySubnet")) {
					response = destroySubnetHandler(t);
				}else if (api.equals("/getSubnetDetail")) {
					response = getSubnetDetailHandler(t);
				}else if (api.equals("/createServer")) {
					response = createServerHandler(t);
				}else if (api.equals("/destroyServer")) {
					response = destroyServerHandler(t);
				}else if (api.equals("/listServer")) {
					response = listServerHandler(t);
				}else if (api.equals("/getServerDetail")) {
					response = getServerDetailHandler(t);
				}else {
					//error
					throw new Exception("WEIRD");
				}
				
				t.sendResponseHeaders(200, response.length());
			} catch (Exception e) {
				//bad request!!
				e.printStackTrace();
				String badReqResponse = "Bad request...";
			}
			
		}
		
		/* API handler -- returns String form of JSON */

		private String getServerDetailHandler(HttpExchange t) {
			// TODO Auto-generated method stub
			return null;
		}

		private String listServerHandler(HttpExchange t) {
			// TODO Auto-generated method stub
			return null;
		}

		private String destroyServerHandler(HttpExchange t) {
			// TODO Auto-generated method stub
			return null;
		}

		private String createServerHandler(HttpExchange t) {
			// TODO Auto-generated method stub
			return null;
		}

		private String getSubnetDetailHandler(HttpExchange t) {
			// TODO Auto-generated method stub
			return null;
		}

		private String destroySubnetHandler(HttpExchange t) {
			// TODO Auto-generated method stub
			return null;
		}

		private String createSubnetHandler(HttpExchange t) {
			// TODO Auto-generated method stub
			return null;
		}

		private String getTenantDetailHandler(HttpExchange t) {
			// TODO Auto-generated method stub
			return null;
		}

		private String deleteTenantHandler(HttpExchange t) {
			// TODO Auto-generated method stub
			return null;
		}

		private String createTenantHandler(HttpExchange t) {
			// TODO Auto-generated method stub
			return null;
		}
		
	}
}
